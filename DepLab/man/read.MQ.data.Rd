% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sql.R
\name{read.MQ.data}
\alias{read.MQ.data}
\title{Reading MaxQuant data}
\usage{
read.MQ.data(filename, expt.id, data.subset = "poi", organism = NULL,
  return.dt = FALSE, data.types = list("peptides.count",
  "unique.peptides.only", "razor.and.unique.peptides", "raw.intensity",
  "MS.MS.count"), db.order.poi = c("gene_symbol", "fraction", "value",
  "measurement", "expt_id", "organism"), db.order.std = c("id", "fraction",
  "value", "measurement", "expt_id"))
}
\arguments{
\item{filename}{path to MaxQuant output (\code{proteinGroups.txt})}

\item{expt.id}{unique identifier for the experiment to be read in}

\item{data.subset}{a string specifying what kind of data should be retrieved,
one of:
\itemize{
\item "poi": extract information for one or more proteins of interest -- 
if you choose this option, make sure to indicate the organism! If you want
to retrieve the bulk information from MaxQuant output, this is the right
parameter.
\item "trypsin": extract information for trypsin
\item a specific UniProt ID or yeast ORF, e.g. "P00761"
}}

\item{organism}{This determines how the proteins of interest should be
retrieved, i.e., indicate either 'human' or 'yeast', or NULL if data.subset 
is not 'poi'.}

\item{return.dt}{Boolean indicating whether a data.table shold be returned
instead of a data.frame. Default: FALSE}

\item{data.types}{List of value types that should be part of the final
data set that will be stored in the data base. Check \code{\link{MQaccessor_to_plotname}}
for possible options.
Default: list("peptides.count", "unique.peptides.only", 
"razor.and.unique.peptides","raw.intensity","MS.MS.count")}

\item{db.order.poi}{Vector indicating the \emph{order} of the columns for the
\code{data.frame} holding the values for the proteins of interest. This should 
match the expectations of \code{\link{initialize.database}} and
\code{\link{add.expt.to.database}}. Default:
c("gene_symbol", "fraction", "value", "measurement", "expt_id", "organism")}

\item{db.order.std}{Vector indicating the _order_ of the columns for the
data.frame holding the values for the spiked-in proteins. This should 
match the expectations of \code{\link{initialize.datbase}} and
\code{\link{add.expt.to.database}}. Default: c("id", "fraction",
"value", "measurement", "expt_id")}
}
\value{
A long data.frame where each row corresponds to a single protein,
and \emph{one} value and type of measurement per fraction.
}
\description{
This wrapper functions reads in the MaxQuant output,
 \emph{retrieves the proteins of interest}, and generates a long 
 \code{data.frame} for \emph{all types of measurement} that are 
available across all fractions (e.g., raw intensity, MS count).
}
\details{
This function is a wrapper for \code{\link{reading_MQ}},
\code{\link{cleaning_MQ}}, and  \code{\link{MQ_to_longFormat}}.
The function automatically focusses on a \emph{subset} of proteins,
e.g. 

The \emph{types of measurement} that are kept depend on the setting of 
\code{MQaccessor_to_plotname}.
}
\seealso{
@seealso \code{\link{reading_MQ}}, \code{\link{cleaning_MQ}},
\code{\link{extract_proteinID}}
}
